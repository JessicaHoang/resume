"use strict";

var _validate = _interopRequireDefault(require("./validate"));
var _getSchema = _interopRequireDefault(require("./get-schema"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
describe('validate', () => {
  let defaultSchema;
  beforeEach(async () => {
    defaultSchema = await (0, _getSchema.default)();
  });
  it('should not throw an error for a valid resume object', async () => {
    await (0, _validate.default)({
      resume: {
        basics: {}
      },
      schema: defaultSchema
    });
  });
  it('should throw an error for an invalid resume object', async () => {
    await expect((0, _validate.default)({
      resume: {
        notInTheSchema: true
      },
      schema: defaultSchema
    })).rejects.toMatchInlineSnapshot(`[Error: An error occurred 'Additional properties not allowed: notInTheSchema'.]`);
  });
  it('should accept a schema override', async () => {
    await (0, _validate.default)({
      resume: 123,
      schema: {
        type: 'number'
      }
    });
    await expect((0, _validate.default)({
      resume: 'thomas',
      schema: {
        type: 'number'
      }
    })).rejects.toMatchInlineSnapshot(`[Error: An error occurred 'Expected type number but found type string'.]`);
  });
});