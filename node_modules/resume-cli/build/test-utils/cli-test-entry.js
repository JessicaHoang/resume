"use strict";

var _mockedVolumeBuilder = _interopRequireDefault(require("./mocked-volume-builder"));
var _fsMonkey = require("fs-monkey");
var _unionfs = require("unionfs");
var fs = _interopRequireWildcard(require("fs"));
function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }
function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const mockVolume = (0, _mockedVolumeBuilder.default)({
  mount: '/test-resumes'
});
const vol = _unionfs.ufs.use(mockVolume).use(fs);
(0, _fsMonkey.patchFs)(vol);
require('../main.js');
process.once('beforeExit', () => {
  process.send({
    data: mockVolume.toJSON(),
    type: 'volumeExport'
  });
});